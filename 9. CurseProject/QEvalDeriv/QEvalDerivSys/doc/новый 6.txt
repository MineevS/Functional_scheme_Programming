#include "packetshaper.h"
#include "ui_packetshaper.h"
//#include "ui_amainwindow.h"

#include <QStandardItemModel>

#include <QTableView>
#include <QModelIndex>
#include <QPair>

#include <QStyledItemDelegate>

class CustomDelegate : public QStyledItemDelegate
{
    using BaseClass = QStyledItemDelegate;

public:
    CustomDelegate(QObject* parent = nullptr);

    virtual void paint(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const override;
};

#include <QPainter>
#include <QAbstractItemView>
#include <QCheckBox>

#include <QToolButton>

#include "checkboxdelegate.h"

CustomDelegate::CustomDelegate(QObject* parent) : BaseClass(parent)
{
}

void CustomDelegate::paint(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const
{
    /*if (QAbstractItemView* tableView = qobject_cast<QAbstractItemView*>(this->parent()))
    {
        //QModelIndex hover = tableView->indexAt(tableView->viewport()->mapFromGlobal(QCursor::pos()));
        if (index.column() == 8)
        {
            painter->fillRect(option.rect, Qt::red);
        }
    }*/



    if (index.column() == 8)
    {
        painter->setPen(Qt::red);
        //painter->fillRect(option.rect, Qt::red);

        //painter->fillPath();

        //painter->drawLine(10, 50, 150, 50);
    }

    BaseClass::paint(painter, option, index);
}

/*
class CheckBoxDelegate : public QStyledItemDelegate
{
    Q_OBJECT

public:
    CheckBoxDelegate(QObject* parent = 0){

    };

    QWidget* createEditor(QWidget* parent, const QStyleOptionViewItem& option,
                          const QModelIndex& index) const override;

    void setEditorData(QWidget* editor, const QModelIndex& index) const override;
    void setModelData(QWidget *editor, QAbstractItemModel *model,
                      const QModelIndex &index) const override;

    void updateEditorGeometry(QWidget *editor,
                              const QStyleOptionViewItem &option, const QModelIndex &index) const override;
};

QWidget* CheckBoxDelegate::createEditor(QWidget* parent,
                                        const QStyleOptionViewItem& option,
                                        const QModelIndex& index) const
{
    if(index.column() == 1)
    {
        QCheckBox* editor = new QCheckBox(parent);
        return editor;
    }

    return QStyledItemDelegate::createEditor(parent, option, index);
}

void CheckBoxDelegate::setEditorData(QWidget* editor,
                                     const QModelIndex& index) const
{
    if(index.column() == 1)
    {
        int value = index.model()->data(index, Qt::EditRole).toBool();
        QCheckBox* checkBox = static_cast<QCheckBox*>(editor);
        checkBox->setChecked(value != 0);
    }
}

void CheckBoxDelegate::setModelData(QWidget* editor,
                                    QAbstractItemModel* model, const QModelIndex& index) const
{
    if(index.column() == 1)
    {
        QCheckBox* checkBox = static_cast<QCheckBox*>(editor);
        bool value = checkBox->isChecked();
        model->setData(index, value, Qt::EditRole);
    }
}

void CheckBoxDelegate::updateEditorGeometry(QWidget* editor,
                                            const QStyleOptionViewItem& option, const QModelIndex& index) const
{
    editor->setGeometry(option.rect);
}

*/

struct ST {
    QList<QString>* list; // {"Пр. К", "№ П", "КР. ст. р."}
    QList<int>* index; // {2, 4, 2}
} st[12];


PacketShaper::PacketShaper(QSqlDatabase & db, QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::PacketShaper), _db(db)
{
    //st[0].list

    //ST st[1];

    st[0].list  = new QList<QString>{"Пр. К", "№ П", "КР. ст. р."};
    st[0].index = new QList<int>{2, 4, 2};
    st[1].list  = new QList<QString>{"Кр. мл. р.", "К № Л", "T"};
    st[1].index = new QList<int>{2, 5, 1};
    st[2].list  = new QList<QString>{"ККЛ", "КДППЗС ст. р."};
    st[2].index = new QList<int>{5, 3};
    st[3].list  = new QList<QString>{"КДППЗС мл. р.", "y"};
    st[3].index = new QList<int>{7, 1};
    st[4].list  = new QList<QString>{"ККЗС ср. р."};
    st[4].index = new QList<int>{8};
    st[5].list  = new QList<QString>{"ККЗС мл. р.", "не исп."};
    st[5].index = new QList<int>{6, 2};
    st[6].list  = new QList<QString>{"КФС ст. р."};
    st[6].index = new QList<int>{8};
    st[7].list  = new QList<QString>{"КФС мл. р.", "КЗОС", "Не исп."};
    st[7].index = new QList<int>{1, 6, 1};
    st[8].list  = new QList<QString>{"КЗНРЛИ ст. р."};
    st[8].index = new QList<int>{8};
    st[9].list  = new QList<QString>{"КЗНРЛИ мл. р.", "Не используется"};
    st[9].index = new QList<int>{2, 6};
    st[10].list  = new QList<QString>{"КЗКРЛИ ст. р."};
    st[10].index = new QList<int>{8};
    st[11].list  = new QList<QString>{"КЗКРЛИ мл. р.", "Не используется"};
    st[11].index = new QList<int>{2, 6};


    int len_st = (int) (sizeof(st)/sizeof(st[0]));

    //qDebug() << sizeof(st)/sizeof(st[0]);

    //st[1].list = QList<QString>{QString("Пр. К"), QString("№ П"), QString("КР. ст. р.")};

    /*ST st[1] = {
        {{QList<QString>{"Пр. К", "№ П", "КР. ст. р."},
          QList<int>{2, 4, 2}}},
    };

    st[0].list =  {"Пр. К", "№ П", "КР. ст. р."};*/

    ui->setupUi(this);

    model = new QSqlTableModel(this, _db);
    model->setTable("IPT");
    model->setEditStrategy(QSqlTableModel::OnManualSubmit);
    model->select();

    ui->ipt_view->setModel(model);

    for(int i = 27; i < model->columnCount(); i++)
        ui->ipt_view->setColumnHidden(i, true);

    qDebug() << model->headerData(1, Qt::Horizontal);

    /*const QVariantList Array[12][16] = {
        QVariantList().append({}),

    };
    1, 2, 1, */

    model_rel = new QSqlRelationalTableModel(this, _db);

    model_rel->setEditStrategy(QSqlTableModel::OnManualSubmit);

    model_rel->setTable("DEC_VIEW");

    //model_rel->it

    //model_rel->moveRow()
    model_rel->setRelation(15, QSqlRelation("T4", "Длительность_ЗИ", "Длительность_ЗИ"));
    model_rel->setRelation(16, QSqlRelation("T5", "ДЧЗИ", "ДЧЗИ"));
    /*
        Вызовы функции setRelation() устанавливают связь между двумя таблицами.
        Первый вызов указывает, что столбец 2 в таблице TT1 является внешним
         ключом, который сопоставляется с полем ДЧЗИ таблицы Т4, и что
         представление должно представить пользователю поле Девиация.
        Второй вызов выполняет нечто подобное со столбцом 3.

    */
    model_rel->select();

    //std::unique_ptr<QTableView *> dec_view;
    //std::unique_ptr<QTableView> view{new QTableView};
//https://russianblogs.com/article/2389718592/
    ui->dec_view->setItemDelegate(new QSqlRelationalDelegate(ui->dec_view));

    //view->setModel(model_rel);

    QSqlRecord rec = model_rel->record();

    //QSqlRecord rec = _db.record("DEC_VIEW");
    for (int i = 0; i < rec.count(); ++i) {
        qDebug() << rec.fieldName(i);

        // qDebug() << model_rel->record(0).value(rec.fieldName(i)).toInt();

        qDebug() << model_rel->itemData(model_rel->index(0, i))[0].toInt(); //[0].toInt()
    }

    // ui->dec_view->setItemDelegate(new CheckBoxDelegate(ui->dec_view));

    ui->dec_view->setItemDelegateForColumn(1, new CheckBoxDelegate(ui->dec_view));

    //view->show();

    //ui->gridLayout_3->addWidget(view.get(), 1, 2, 1, 1);

    ui->dec_view->setModel(model_rel);


    //model_rel->record(1).value("total").toInt();

    ui->dec_view->horizontalHeader()->setMinimumWidth(500);

    ui->dec_view->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    ui->dec_view->verticalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);

    //ui->dec_view->ad

    //ui->dec_view->addMapping(new QComboBox,2);

    QStandardItemModel* model2 = new QStandardItemModel(24, 16); // 3 строки, 2 столбца

    QStringList lst;
    lst << "№ байта";
    for(int i = 15; i >= 0; i--)
        if (i > 7)  lst << "D" + QString::number(i);
        else        lst << "A" + QString::number(i);

    qDebug() << lst;

    model2->setHorizontalHeaderLabels(lst);

    ui->bin_view->setModel(model2);


    for(int i = 0; i < 12; i += 1){
        model2->setItem(2*i, 0, new QStandardItem(QString::number(i + 1)));
        model2->item(2*i, 0)->setTextAlignment(Qt::Alignment::enum_type::AlignCenter);
        ui->bin_view->setSpan(2*i, 0, 2, 1);
        model2->item(2*i, 0)->setBackground(QBrush(QColor("#ffcccc")));
    }

    //model->data();

    for(int i = 0; i < len_st*2; i++){
        for(int j = 1; j < 17; j++){
            model2->setItem(i, j, new QStandardItem()); // QString::number(j)
            model2->item(i, j)->setTextAlignment(Qt::Alignment::enum_type::AlignCenter);
            model2->item(i, j)->setBackground(QBrush(((j < 9) ? "white" : QColor("#dddddd") )));
        }
    }

    for(int i = 0; i < len_st; i++){
        int count = 0;
        for(int j = 1; j <= st[i].list->count() ; j++){ //std::accumulate(std::begin(arri), std::end(arri), 0) - 1
            model2->setItem(2*i + 1, j + count, new QStandardItem(st[i].list->at(j-1)));
            model2->item(2*i + 1, j + count)->setTextAlignment(Qt::Alignment::enum_type::AlignCenter);
            ui->bin_view->setSpan(2*i + 1, j + count, 1, st[i].index->at(j-1));
            model2->item(2*i + 1, j + count)->setBackground(QBrush(QColor("#eeeeee")));
            count += st[i].index->at(j-1) - 1;
        }
    }

    for(int i = 0; i < len_st*2; i++){
        if(i % 2 == 0){
            for(int j = 9; j < 17; j ++){
                model2->item(i, j)->setBackground(QBrush(QColor("#eeeeee")));
                //model2->setItem(i, j, new QStandardItem(QString::number(j)));
            }
        }else{
            model2->setItem(i, 9, new QStandardItem("Инвертированный № П"));
            model2->item(i, 9)->setTextAlignment(Qt::Alignment::enum_type::AlignCenter);
            ui->bin_view->setSpan(i, 9, 1, 4);
            model2->item(i, 9)->setBackground(QBrush(QColor("#cccccc")));
        }
    }

    //qDebug() << std::accumulate(std::begin(arri), std::end(arri), 0);
    //qDebug() << (int)(sizeof(arri)/sizeof(*arri));

    /*for(int i = 1; i < 2; ++i){
        int count = 0;
        for(int j = 1; j <= (int)(sizeof(arri)/sizeof(*arri)) ; j++){ //std::accumulate(std::begin(arri), std::end(arri), 0) - 1
            model2->setItem(i, j + count, new QStandardItem(arr[j-1]));
            model2->item(i, j + count)->setTextAlignment(Qt::Alignment::enum_type::AlignCenter);
            ui->bin_view->setSpan(i, j + count, 1, arri[j-1]);
            model2->item(i, j + count)->setBackground(QBrush("gray"));
            count += arri[j-1] - 1;
        }
    }*/

    /*model2->setItem(1, 1, new QStandardItem("Пр. К"));
    model2->item(1, 1)->setTextAlignment(Qt::Alignment::enum_type::AlignCenter);
    ui->bin_view->setSpan(1, 1, 1, 2);
    model2->item(1, 1)->setBackground(QBrush("gray"));
    model2->setItem(1, 3, new QStandardItem("№ П"));
    model2->item(1, 3)->setTextAlignment(Qt::Alignment::enum_type::AlignCenter);
    ui->bin_view->setSpan(1, 3, 1, 4);
    model2->item(1, 3)->setBackground(QBrush("gray"));
    model2->setItem(1, 7, new QStandardItem("КР. ст. р."));
    model2->item(1, 7)->setTextAlignment(Qt::Alignment::enum_type::AlignCenter);
    ui->bin_view->setSpan(1, 7, 1, 2);
    model2->item(1, 7)->setBackground(QBrush("gray"));*/

    //ui->bin_view->setItemDelegateForColumn(8, new CustomDelegate(ui->bin_view));
    //ui->bin_view->setItemDelegateForColumn(7, new CustomDelegate(ui->bin_view));

    //model2->item(0, 7)->

    /*model2->setItem(0, 1, new QStandardItem("39"));
    model2->setItem(1, 0, new QStandardItem("Bob"));
    model2->setItem(1, 1, new QStandardItem("43"));

    model2->setItem(2, 0, new QStandardItem("Sam"));
    */
    //ui->bin_view->setSpan(2, 0, 1, 2);

    //model2->setItem(2, 1, new QStandardItem("28"));

    //QTableView::item

    //ui->bin_view->setStyleSheet("QTableView::item { border-left-color: 5px solid black;};");

    //ui->bin_view->horizontalHeader()->hide();



    ///lst << myLib.rus("Номер товара") << myLib.rus("Товар") << myLib.rus("Количество");
    //temp -> setColumnCount(3);
    //temp -> setHorizontalHeaderLabels(lst);


    //QHeaderView * header = model2->horizontalHeader();

    //ui->bin_view->setHorizontalHeader(lst);


    ui->bin_view->verticalHeader()->hide();

    /*for(int i = 0; i < 17; i++)
        ui->bin_view->setColumnWidth(i, 1);

    for(int i = 0; i < 24; i++)
        ui->bin_view->setRowHeight(i, 2);*/


    ui->bin_view->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    ui->bin_view->verticalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);

    //ui->bin_view->releaseMouse();



   // ui->bin_view->setSelectionMode(QAbstractItemView::MultiSelection);


    //QItemSelectionModel *sm = ui->bin_view->selectionModel();

    //qDebug() << model2->item(0, 1)->text();

    //ui->bin_view->selectionModel()->selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);


    // Получение строки/столбца в которых должны произойти изменения [pressed]
    connect(ui->bin_view->selectionModel(),
        SIGNAL(selectionChanged(const QItemSelection &,const QItemSelection &)),
        this,
        SLOT(selectionChanged(const QItemSelection &,const QItemSelection &)));

    //model2->dataChanged();

    // Получение строки/столбца/ элемента изменения. [released]
    connect(model2,
        SIGNAL(dataChanged(const QModelIndex &, const QModelIndex &)),
        this,
        SLOT(datachangetModel(const QModelIndex &, const QModelIndex &)));

    /*model3 = new QStandardItemModel(ui->dec_view);

    ui->dec_view->setModel(model3);

    ui->dec_view->horizontalHeader()->setStretchLastSection(true);

    ui->dec_view->horizontalHeader()->setVisible(false);
    ui->dec_view->verticalHeader()->setVisible(false);
    */

    //ui->packet_view->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    //ui->packet_view->verticalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);


    //ui->create_parcel;

    connect(ui->create_parcel, &QToolButton::clicked, this, [this](){
        QList<QStandardItem*> lst2;

        qDebug() << model3->rowCount();

        lst2.append(new QStandardItem("Посылка № " + QString::number(model3->rowCount())));

        model3->appendRow(lst2);

        //ui->packet_view->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
        //ui->packet_view->verticalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);

        ///ui->packet_view->resizeColumnsToContents();
    });

    connect(ui->delete_parcel, &QToolButton::clicked, this, [this](){
        qDebug() << model3;

        qDebug() << ui->dec_view->currentIndex();

        model3->removeRow(ui->dec_view->currentIndex().row());

        /*
            Удаляет данный row из дочерних элементов parent указанного.
            Возвращает, true если строка удалена; в противном случае возвращает false.
        */

        //model3->data(ui->packet_view->currentIndex()).clear();
    });

    //ui->bin_view->selectionModel()->d
/*    // pressed:
    connect(ui->bin_view->selectionModel(),
        SIGNAL(currentChanged(const QModelIndex &, const QModelIndex &)),
        this,
        SLOT(currentChangetView(const QModelIndex &, const QModelIndex &)));
*/

    connect(ui->clear_packet, &QToolButton::clicked, this, [this](){
        //model3->removeRows(model3->rowCount(), 0);

        model3->clear();
    });

    // add_to_db;

    // add_to_packet;



    /*
    model->setQuery("SELECT Идентификатор_посылки, "
                    "Идентификатор_пакета,"
                    "Признак_корректировки,"
                    "Номер_посылки_в_пакете,"
                    "Номер_посылки_в_пакете,"
                    "Код_режима,"
                    "Нуль_информация_1,"
                    "Нуль_информация_2,"
                    "Признак_теста,"
                    "Код_номера_луча,"
                    "Вкл_пилот_Откл_Рвых,"
                    "Вкл_блокировки_ИЗП,"
                    "Код_длительности_периода_повторения_зондирующего_сигнала,"
                    "Код_количества_лучей,"
                    "Признак_необходимости_корректировки_в_процессе_съемки,"
                    "Код_количества_зондирования_в_субкадре,"
                    "Код_формирования_сигнала,"
                    "Код_девиации_частоты_в_зондирующем_сигнале,"
                    "Код_длительности_ЗИ,"
                    "Вкл_Откл_смены_знака_ЛЧМ,"
                    "Вкл_Откл_изменения_начальной_фазы,"
                    "Резерв_2,"
                    "Код_задержки_отраженного_синала,"
                    "Начало_отсчета_ИЗП,"
                    "Код_задержки_начала_строба_записи_РЛИ,"
                    "Резерв_3,"
                    "Код_задержки_конца_строба_записи_РЛИ,"
                    "Резерв_4 "
                    "FROM IPT", _db); //  model->setQuery("SELECT 'Идентификатор посылки', 'Идентификатор пакета'", _db);
*/
    //model->setFilter("");

    //model_packet = new QSqlTableModel(this, _db);

    //model_packet->setHeaderData(0, Qt::Horizontal, "Номер_пакета");

    //model_packet->insertColumn(0, QModelIndex());



    //model->selectRow(1);

    //ui->packet_view->setModel(model);

    qDebug() << model->columnCount();

    for(int i = 0; i < 3; i++){
        ui->dec_view->setColumnHidden(i, true);
    }

    //model->setQuery("CREATE TABLE packet (id INTEGER PRIMARY KEY AUTOINCREMENT, "
                          // "name INTEGER NOT NULL)");

    //QSqlQuery query2;

    /*if(query2.exec("CREATE TABLE packet (id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    "name INTEGER NOT NULL)")){
    }*/

    /*model_packet->exec("create table student (id int primary key,"
                  "name varchar(20));");*/

    //model_packet->record();

    //QSqlRecord record = model_packet->record();
    /* since the id field has the autoincrement attribute,
* it is not necessary to indicate its value,
* that is because this field of the request is removed.
*
*
*/
    //record.remove(record.indexOf("id"));
    //record.setValue("name", 1);
    //record.setValue("lastname", 2.0);
    // model_packet->rowCount();
    /*-1 is set to indicate that it will be added to the last row*/
    /*if(model_packet->insertRecord(model_packet->rowCount(), record)){
        qDebug()<<"successful insertion";
        //model->submitAll();
    }*/

    //ui->packet_view->setModel(model);

    // ui->ipt_view->setColumnWidth(0, 26);

    // https://russianblogs.com/article/6812436413/

    // определяем данные для модели
    /*QStandardItemModel* model2 =   new QStandardItemModel(3, 2); // 3 строки, 2 столбца

    QStandardItem *it = new QStandardItem("Tom");
    it->setBackground(QBrush("gray"));
    //it.setBackground();
    model2->setItem(0, 0, it);
    model2->setItem(0, 1, new QStandardItem(39));
    model2->setItem(1, 0, new QStandardItem("Bob"));
    model2->setItem(1, 1, new QStandardItem(43));
    model2->setItem(2, 0, new QStandardItem("Sam"));
    model2->setItem(2, 1, new QStandardItem(28));

    //model2->appendRow();

    QList<QStandardItem*> ll;

    ll.append(new QStandardItem(1));
    ll.append(new QStandardItem(2));
    model2->appendRow(ll);

    // установка заголовков таблицы
    model2->setHeaderData(0, Qt::Horizontal, "Name");
    model2->setHeaderData(1, Qt::Horizontal, "Age");

    //https://metanit.com/cpp/qt/7.6.php?ysclid=luh83t42r967903462

    ui->packet_view->setModel(model2);

    QSqlRecord rec;

    /*foreach(model2->rowCount();){

    }*/

    //rec.append(model2.);

    // https://russianblogs.com/article/46232235172/

    //model->insertRecord(0, rec);*/

    ui->ipt_view->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    ui->ipt_view->verticalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);

    //ui->ipt_view->resizeColumnsToContents();

}

PacketShaper::~PacketShaper()
{
    delete ui;
}
